import matplotlib.pyplot as plt
import numpy as np
import random


def cspline(x_input, y_input, xx):
    """
    x_input, y_input - координаты заданных точек (всего N + 1 точка)
    (Далее эти списки будут отсортированы и записаны уже в списки x и y)
    Для определения параметров кубического сплайна необходимо решить систему
    из 4N уравнений для 4N неизвестных. Неизвестными являются параметры
    a1, a2, ..., aN
    b1, b2, ..., bN
    c1, c2, ..., cN
    d1, d2, ..., dN

    Эти 4N уравнений подразделяются на 7 типов
    1 тип: N-1 уравнений - условия непрерывности функций
    2 тип: N-1 уравнений - условия непрерывности первых производных
    3 тип: N-1 уравнений - условия непрерывности вторых производных
    4 тип: N уравнений - условия интерполирования
    5 тип: 1 уравнение - условие интерполирования в точке x0
    6 тип: 1 уравнение - краевое условие слева
    7 тип: 1 уравнение - краевое условие справа

    Данную систему кратко записываем в виде А * sol = F, где
        A - матрица коэффициентов перед неизвестными параметрами
        sol - стобец с неизвестными параметрами, относительно которых решаем систему (solution)
        F - столбец свободных членов

    В векторе sol неизвестные параметры расположены в таком порядке:
    sol = (a1, a2, ..., aN, b1, b2, ..., bN, c1, c2, ..., cN, d1, d2, ..., dN)
    Поэтому имеем следующее соответствие между неизвестными параметрами и индексами списка sol:
        ai -> sol[i-1 + 0*N]
        bi -> sol[i-1 + 1*N]
        ci -> sol[i-1 + 2*N]
        di -> sol[i-1 + 3*N]
    """
    # 0. Для начала сортируем точки по возрастанию x
    all_points = [[x_input[i], y_input[i]] for i in range(len(x_input))]    # координаты всех точек в одном списке
    all_points.sort(key=lambda p: p[0])                                     # сортируем
    x, y = [p[0] for p in all_points], [p[1] for p in all_points]           # заново переписываем в отдельные списки

    # 1. Вводим для удобства вектор h
    h = [x[i] - x[i - 1] for i in range(1, len(x))]
    N = len(h)
    # В список yy будут записаны значения, которые вернет функция
    # т. е. значения естественного кубического сплайна в точках xx
    yy = [0] * len(xx)
    print(f"x={x}\ny={y}\nh={h}")

    # 2. Инициализируем матрицу коэффициентов и столбец свободных членов
    A = [[0 for j in range(4 * N)] for i in range(4 * N)]
    F = [0 for i in range(4 * N)]

    # 3.1. Уравнения типа (1)
    for i in range(2, N + 1):
        # k - текущая строка в матрице A
        k = i - 2
        # определяем индексы, соответствующие параметрам
        ai = i - 1 + 0*N
        bi = i - 1 + 1*N
        ci = i - 1 + 2*N
        di = i - 1 + 3*N
        hi = i - 1
        # записываем коэффициенты в матрицу коэффициентов
        A[k][ai] = 1
        A[k][bi] = -h[hi]
        A[k][ci] = (h[hi] ** 2) / 2
        A[k][di] = -(h[hi] ** 3) / 6
        A[k][ai - 1] = -1
        # и записываем свободные члены
        F[k] = 0

    # 3.2. Уравнения типа (2)
    for i in range(2, N + 1):
        # k - текущая строка в матрице A
        k = i - 2 + (N - 1)
        # определяем индексы, соответствующие параметрам
        bi = i - 1 + N
        ci = i - 1 + 2*N
        di = i - 1 + 3*N
        hi = i - 1
        # записываем коэффициенты в матрицу коэффициентов
        A[k][bi] = 1
        A[k][ci] = -h[hi]
        A[k][di] = (h[hi] ** 2) / 2
        A[k][bi - 1] = -1
        # и записываем свободные члены
        F[k] = 0

    # 3.3. Уравнения типа (3)
    for i in range(2, N + 1):
        # строка в матрице
        k = i - 2 + 2 * (N - 1)
        # индексы
        ci = i - 1 + 2 * N
        di = i - 1 + 3 * N
        hi = i - 1
        # коэффициенты
        A[k][ci] = 1
        A[k][di] = -h[hi]
        A[k][ci - 1] = -1
        # свободные члены
        F[k] = 0

    # 3.4. Уравнения типа (4)
    for i in range(1, N + 1):
        # строка в матрице
        k = i - 1 + 3 * (N - 1)
        # индексы
        ai = i - 1
        # коэффициенты
        A[k][ai] = 1
        # свободные члены
        F[k] = y[i]

    # 3.5. Уравнение (5)
    # коэффициенты
    A[4*N - 3][0*N] = 1
    A[4*N - 3][1*N] = -h[0]
    A[4*N - 3][2*N] = (h[0] ** 2) / 2
    A[4*N - 3][3*N] = -(h[0] ** 3) / 6
    # свободные члены
    F[4*N - 3] = y[0]

    # 3.6. Уравнение (6) - краевое условие
    A[4*N - 2][3*N - 1] = 1

    # 3.7. Уравнение (7) - краевое условие
    A[4*N - 1][2*N] = 1
    A[4*N - 1][3*N] = -h[0]

    # 4. Решаем систему уравнений
    sol = np.linalg.solve(A, F)

    # 5. Функция для получения значения кубического сплайна в заднной точке
    def get_y_of(x0):
        seg = N - 1
        for j in range(1, N + 1):
            if x0 <= x[j]:
                seg = j - 1
                break

        a = sol[seg + 0*N]
        b = sol[seg + 1*N]
        c = sol[seg + 2*N]
        d = sol[seg + 3*N]
        y0 = a + b*(x0 - x[seg + 1]) + c/2*(x0 - x[seg + 1])**2 + d/6*(x0 - x[seg + 1])**3
        return y0

    # 6. Для каждого x из списка xx вычисляем значение кубического сплайна, используя найденные параметры
    for i in range(len(xx)):
        x_new = xx[i]
        y_new = get_y_of(x_new)
        yy[i] = y_new
    print(f"xx = {xx}\nyy = {yy}")

    # 7. Рисуем график
    # 7.1. Параметры оси
    max_x = max(x + xx)
    min_x = min(x + xx)
    x_len = max_x - min_x
    # 7.2. Настройки полотна для графика
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    # 7.3. Точки кубического сплайна
    x_graph = np.linspace(min_x, max_x, 1000)
    y_graph = [get_y_of(x_i) for x_i in x_graph]

    # 7.4. Рисуем график
    plt.plot(x_graph, y_graph, 'r', label='cubic spline')
    plt.plot(x, y, 'or', label='x')
    plt.plot(xx, yy, 'ob', label='xx')
    ax.legend()
    plt.show()

    return yy


# Пример вызова функции
x = [8.8, 1, 1.5, 2.9, 4.4, 8, 10, 12]
y = [3, 20, 5, 6, 9, 15, 9, 12]
xx = [2, 6, 2, 12.5]
yy = cspline(x, y, xx)

x = [random.random() for i in range(20)]
y = [random.random() for i in range(20)]
xx = [0.5]
yy = cspline(x, y, xx)

